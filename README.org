* gbRender
** Architecture
*** Concepts
**** Director
     Director contains a root Entity, holds camera to shoot
***** Interface 
- Ready
- Action
  
**** Entity
     Enity may contain Elements and sub-Entities(children)
***** Interface
- Start
  1. elements Start
  2. children Start
- +Awake+
- Instantiate
- AddChild
  - AddChild(dataEntity) :: create an new instantiated child
  - AddChild(an exits entity) :: change entity's parent
  - AddChild(entity name) :: create a new empty child
- RemoveChild
- AddElement
**** Element
     Different element will contribute different feature to the Entity
     (such as camera, render...)
**** Start
*** C++ Class Hierachy
    
    
** Calling Sequence
*** Basic Rules
**** Awake, Start& End
     Awake \to Start \to End
**** Entity & Element
     Element Awake 
     \to Entity Start \to Element Start
     \to Entity End \to Element End
**** Parent & Children
     Children Awake \to Parent Awake
     Parent Start \to Children Start
     Parent End \to Children End
**** Summary
- Awake :: from bottom to top
- Start :: from top to bottom
- End :: from top to bottom
**** NOTE!!!
     Entity::AddChild can be invoked in either Element::Awake() or Element::Start() 
     but not in Element::End() where the Entity::Start will never have a chance to be called.
     Entity::AddElement can only be invoked in Element::Awake(), 
     otherwise the Entity::Start() will never be called.
     
     
*** Description
    #+BEGIN_VERSE
    children element Awake
    \to parent element Awake
    \to ... 
    \to parent entity Start \to parent elment Start
    \to children entity Start \to children element Start
    \to ...
    #+END_VERSE
    
** Render Order
*** Order
    RenderQueue \to shader \to Material \to Mesh \to draw
*** absolute static render(/environment buildings/)
    vtxAttrib, instVar, UnifVar never changed
*** partial static render(same type NPC)
    only instVar changed
*** dynamic render
    all changed in every frame
    
    
    
** Class Design
   
*** Director
    
+ Data Members
  - octree :: store the enties which all have render element
	      
*** Entity
+ Data Members
  - name
  - transform
  - components
  - children
    
*** Element
    
**** Render
     
+ Data Members
  - mesh
  - material
    
+ Member Functions
  - Awake :: register to director's octree
	     
  - End :: unregister
	   
**** Camera
+ Data Members
  - InterestTag
     
**** mesh
+ Data Members
  - sphere boundingbox :: calculating on the fly every time or storing in mesh file?
  - vertex data ::
    
**** material
+ Data Members
  - shader
  - uniformVar
  - /instVar?/
    
** Vertex Naming Convension
   - vertex variable :: gb_vtxVar_[pos, uv, color, idx]
    - instance variable :: gb_instVar_[mvp, color, ...]
    - uniform variable :: gb_uniVar_...
	  
	  
** File Format
   
*** Mesh
    - name ::
	     gb_vtx_[pos, idx, uv, color]
    example:
    #+BEGIN_SRC lua
return
   {
      gb_vtx_pos = 
	 {
	    {1.0, 0.0, 0.0},
	    {2.0, 0.0, 0.0},
	    (0.0, 1.0, 0.0)
	 },
      gb_vtx_index = {0, 1, 2}
   }
    #+END_SRC

*** Material
    - Shader :: shader file
    - UniformVars :: uniform variables

    example:		
    #+BEGIN_SRC lua
    return
    {
      Shader = "Default.gbShader",
      UniformVars =
      {
        tint = {0.0, 0.0, 1.0, 1.0}
      }
    }
    #+END_SRC

*** Shader
    example : 
    #+BEGIN_SRC C
GB_RENDER_DATA_SHADER_INFO_BEGIN
return
   {
      VtxVars =
	 {
	    {
	       Name = "gb_vtxVar_pos",
	       Type = slType.Vec3
	    },
	    {
	       Name = "gb_vtxVar_uv",
	       Type = slType.Vec2
	    },
	    {
	       Name = "gb_instVar_mvp",
	       Type = slType.Mat4,
	       Divisor = 1
	    }
	 },
      UniformVars =
	 {
	    {
	       Name = "font",
	       Type = slType.Sampler
	    }
	 },
      GLCfg =
	 {
	    DepthTest =
	       {
		  Enabled = false
	       }
	 },
      Misc =
	 {
	    RenderQueue = ShaderRenderQueue.Background
	 }
   }
GB_RENDER_DATA_SHADER_INFO_END

GB_RENDER_DATA_SHADER_VERT_BEGIN
#version 450 core

in vec3 gb_vtxVar_pos;
in vec2 gb_vtxVar_uv;
in mat4 gb_instVar_mvp;

out vec2 uv;

void main()
{
  gl_Position = gb_instVar_mvp * vec4(gb_vtxVar_pos, 1.0f);
  uv = gb_vtxVar_uv;
}

GB_RENDER_DATA_SHADER_VERT_END

GB_RENDER_DATA_SHADER_FRAG_BEGIN
#version 450 core

uniform sampler2D font;
in vec2 uv;
out vec4 color;

void main()
{
  float r = texture(font, uv).r;
  if(r < 0.495f)
    color.r = 0.3f;
  color.b = r;
}

GB_RENDER_DATA_SHADER_FRAG_END

#+END_SRC

** TODO 
   - using cache algorithm for vtxData storing in GPU memory
   - 


   #+OPTIONS: ^:nil
   
